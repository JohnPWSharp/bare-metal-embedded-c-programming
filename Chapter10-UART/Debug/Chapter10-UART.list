
Chapter10-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c8c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e24  08000e24  00001e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e3c  08000e3c  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e3c  08000e3c  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e3c  08000e3c  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e3c  08000e3c  00001e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e40  08000e40  00001e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000e44  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000ea0  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000ea0  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cf0  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000431  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  000031b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e4  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa4d  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ba4  00000000  00000000  00012e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055725  00000000  00000000  000149d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006a0fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a6c  00000000  00000000  0006a140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0006abac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000e0c 	.word	0x08000e0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08000e0c 	.word	0x08000e0c

080001d8 <main>:
#include <stdio.h>
#include "uart.h"


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	/*Initialize debug UART*/
	uart_init();
 80001dc:	f000 f8b6 	bl	800034c <uart_init>


	while(1)
	{

		printf("Hello from STM32...\r\n");
 80001e0:	4801      	ldr	r0, [pc, #4]	@ (80001e8 <main+0x10>)
 80001e2:	f000 fa7f 	bl	80006e4 <puts>
 80001e6:	e7fb      	b.n	80001e0 <main+0x8>
 80001e8:	08000e24 	.word	0x08000e24

080001ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001f8:	2300      	movs	r3, #0
 80001fa:	617b      	str	r3, [r7, #20]
 80001fc:	e00a      	b.n	8000214 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80001fe:	f3af 8000 	nop.w
 8000202:	4601      	mov	r1, r0
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	1c5a      	adds	r2, r3, #1
 8000208:	60ba      	str	r2, [r7, #8]
 800020a:	b2ca      	uxtb	r2, r1
 800020c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	3301      	adds	r3, #1
 8000212:	617b      	str	r3, [r7, #20]
 8000214:	697a      	ldr	r2, [r7, #20]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	429a      	cmp	r2, r3
 800021a:	dbf0      	blt.n	80001fe <_read+0x12>
  }

  return len;
 800021c:	687b      	ldr	r3, [r7, #4]
}
 800021e:	4618      	mov	r0, r3
 8000220:	3718      	adds	r7, #24
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b086      	sub	sp, #24
 800022a:	af00      	add	r7, sp, #0
 800022c:	60f8      	str	r0, [r7, #12]
 800022e:	60b9      	str	r1, [r7, #8]
 8000230:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
 8000236:	e009      	b.n	800024c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	60ba      	str	r2, [r7, #8]
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f877 	bl	8000334 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	3301      	adds	r3, #1
 800024a:	617b      	str	r3, [r7, #20]
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	429a      	cmp	r2, r3
 8000252:	dbf1      	blt.n	8000238 <_write+0x12>
  }
  return len;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	4618      	mov	r0, r3
 8000258:	3718      	adds	r7, #24
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <_close>:

int _close(int file)
{
 800025e:	b480      	push	{r7}
 8000260:	b083      	sub	sp, #12
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800026a:	4618      	mov	r0, r3
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000276:	b480      	push	{r7}
 8000278:	b083      	sub	sp, #12
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
 800027e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000286:	605a      	str	r2, [r3, #4]
  return 0;
 8000288:	2300      	movs	r3, #0
}
 800028a:	4618      	mov	r0, r3
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <_isatty>:

int _isatty(int file)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800029e:	2301      	movs	r3, #1
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002b8:	2300      	movs	r3, #0
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002d0:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <_sbrk+0x5c>)
 80002d2:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <_sbrk+0x60>)
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002dc:	4b13      	ldr	r3, [pc, #76]	@ (800032c <_sbrk+0x64>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d102      	bne.n	80002ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002e4:	4b11      	ldr	r3, [pc, #68]	@ (800032c <_sbrk+0x64>)
 80002e6:	4a12      	ldr	r2, [pc, #72]	@ (8000330 <_sbrk+0x68>)
 80002e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002ea:	4b10      	ldr	r3, [pc, #64]	@ (800032c <_sbrk+0x64>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	693a      	ldr	r2, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d207      	bcs.n	8000308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002f8:	f000 fb22 	bl	8000940 <__errno>
 80002fc:	4603      	mov	r3, r0
 80002fe:	220c      	movs	r2, #12
 8000300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000302:	f04f 33ff 	mov.w	r3, #4294967295
 8000306:	e009      	b.n	800031c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <_sbrk+0x64>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800030e:	4b07      	ldr	r3, [pc, #28]	@ (800032c <_sbrk+0x64>)
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	4a05      	ldr	r2, [pc, #20]	@ (800032c <_sbrk+0x64>)
 8000318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800031a:	68fb      	ldr	r3, [r7, #12]
}
 800031c:	4618      	mov	r0, r3
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20020000 	.word	0x20020000
 8000328:	00000400 	.word	0x00000400
 800032c:	20000078 	.word	0x20000078
 8000330:	200001c8 	.word	0x200001c8

08000334 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f84f 	bl	80003e0 <uart_write>
	return ch;
 8000342:	687b      	ldr	r3, [r7, #4]
}
 8000344:	4618      	mov	r0, r3
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <uart_init>:

void uart_init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000350:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <uart_init+0x84>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a1e      	ldr	r2, [pc, #120]	@ (80003d0 <uart_init+0x84>)
 8000356:	f043 0301 	orr.w	r3, r3, #1
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 800035c:	4b1d      	ldr	r3, [pc, #116]	@ (80003d4 <uart_init+0x88>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1c      	ldr	r2, [pc, #112]	@ (80003d4 <uart_init+0x88>)
 8000362:	f023 0310 	bic.w	r3, r3, #16
 8000366:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <uart_init+0x88>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a19      	ldr	r2, [pc, #100]	@ (80003d4 <uart_init+0x88>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <uart_init+0x88>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	4a16      	ldr	r2, [pc, #88]	@ (80003d4 <uart_init+0x88>)
 800037a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800037e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <uart_init+0x88>)
 8000382:	6a1b      	ldr	r3, [r3, #32]
 8000384:	4a13      	ldr	r2, [pc, #76]	@ (80003d4 <uart_init+0x88>)
 8000386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800038a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <uart_init+0x88>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a10      	ldr	r2, [pc, #64]	@ (80003d4 <uart_init+0x88>)
 8000392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000396:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <uart_init+0x88>)
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <uart_init+0x88>)
 800039e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003a2:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <uart_init+0x84>)
 80003a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003a8:	4a09      	ldr	r2, [pc, #36]	@ (80003d0 <uart_init+0x84>)
 80003aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ae:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 80003b0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80003b4:	4808      	ldr	r0, [pc, #32]	@ (80003d8 <uart_init+0x8c>)
 80003b6:	f000 f83f 	bl	8000438 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <uart_init+0x90>)
 80003bc:	2208      	movs	r2, #8
 80003be:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <uart_init+0x90>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	4a05      	ldr	r2, [pc, #20]	@ (80003dc <uart_init+0x90>)
 80003c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003ca:	60d3      	str	r3, [r2, #12]
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40023800 	.word	0x40023800
 80003d4:	40020000 	.word	0x40020000
 80003d8:	00f42400 	.word	0x00f42400
 80003dc:	40004400 	.word	0x40004400

080003e0 <uart_write>:



static void uart_write(int ch)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80003e8:	bf00      	nop
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <uart_write+0x2c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a04      	ldr	r2, [pc, #16]	@ (800040c <uart_write+0x2c>)
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	6053      	str	r3, [r2, #4]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40004400 	.word	0x40004400

08000410 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	085a      	lsrs	r2, r3, #1
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	441a      	add	r2, r3
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	fbb2 f3f3 	udiv	r3, r2, r3
 8000428:	b29b      	uxth	r3, r3
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
	...

08000438 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000442:	6839      	ldr	r1, [r7, #0]
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ffe3 	bl	8000410 <compute_uart_bd>
 800044a:	4603      	mov	r3, r0
 800044c:	461a      	mov	r2, r3
 800044e:	4b03      	ldr	r3, [pc, #12]	@ (800045c <uart_set_baudrate+0x24>)
 8000450:	609a      	str	r2, [r3, #8]
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40004400 	.word	0x40004400

08000460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000460:	480d      	ldr	r0, [pc, #52]	@ (8000498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000462:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000464:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480c      	ldr	r0, [pc, #48]	@ (800049c <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490d      	ldr	r1, [pc, #52]	@ (80004a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0d      	ldr	r2, [pc, #52]	@ (80004a4 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	@ (80004a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0a      	ldr	r4, [pc, #40]	@ (80004ac <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048e:	f000 fa5d 	bl	800094c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff fea1 	bl	80001d8 <main>

08000496 <LoopForever>:

LoopForever:
  b LoopForever
 8000496:	e7fe      	b.n	8000496 <LoopForever>
  ldr   r0, =_estack
 8000498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004a4:	08000e44 	.word	0x08000e44
  ldr r2, =_sbss
 80004a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80004ac:	200001c8 	.word	0x200001c8

080004b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC_IRQHandler>
	...

080004b4 <std>:
 80004b4:	2300      	movs	r3, #0
 80004b6:	b510      	push	{r4, lr}
 80004b8:	4604      	mov	r4, r0
 80004ba:	e9c0 3300 	strd	r3, r3, [r0]
 80004be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004c2:	6083      	str	r3, [r0, #8]
 80004c4:	8181      	strh	r1, [r0, #12]
 80004c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80004c8:	81c2      	strh	r2, [r0, #14]
 80004ca:	6183      	str	r3, [r0, #24]
 80004cc:	4619      	mov	r1, r3
 80004ce:	2208      	movs	r2, #8
 80004d0:	305c      	adds	r0, #92	@ 0x5c
 80004d2:	f000 f9e7 	bl	80008a4 <memset>
 80004d6:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <std+0x58>)
 80004d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80004da:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <std+0x5c>)
 80004dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80004de:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <std+0x60>)
 80004e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80004e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <std+0x64>)
 80004e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80004e6:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <std+0x68>)
 80004e8:	6224      	str	r4, [r4, #32]
 80004ea:	429c      	cmp	r4, r3
 80004ec:	d006      	beq.n	80004fc <std+0x48>
 80004ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80004f2:	4294      	cmp	r4, r2
 80004f4:	d002      	beq.n	80004fc <std+0x48>
 80004f6:	33d0      	adds	r3, #208	@ 0xd0
 80004f8:	429c      	cmp	r4, r3
 80004fa:	d105      	bne.n	8000508 <std+0x54>
 80004fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000504:	f000 ba46 	b.w	8000994 <__retarget_lock_init_recursive>
 8000508:	bd10      	pop	{r4, pc}
 800050a:	bf00      	nop
 800050c:	080006f5 	.word	0x080006f5
 8000510:	08000717 	.word	0x08000717
 8000514:	0800074f 	.word	0x0800074f
 8000518:	08000773 	.word	0x08000773
 800051c:	2000007c 	.word	0x2000007c

08000520 <stdio_exit_handler>:
 8000520:	4a02      	ldr	r2, [pc, #8]	@ (800052c <stdio_exit_handler+0xc>)
 8000522:	4903      	ldr	r1, [pc, #12]	@ (8000530 <stdio_exit_handler+0x10>)
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <stdio_exit_handler+0x14>)
 8000526:	f000 b869 	b.w	80005fc <_fwalk_sglue>
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	08000c95 	.word	0x08000c95
 8000534:	20000010 	.word	0x20000010

08000538 <cleanup_stdio>:
 8000538:	6841      	ldr	r1, [r0, #4]
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <cleanup_stdio+0x34>)
 800053c:	4299      	cmp	r1, r3
 800053e:	b510      	push	{r4, lr}
 8000540:	4604      	mov	r4, r0
 8000542:	d001      	beq.n	8000548 <cleanup_stdio+0x10>
 8000544:	f000 fba6 	bl	8000c94 <_fflush_r>
 8000548:	68a1      	ldr	r1, [r4, #8]
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <cleanup_stdio+0x38>)
 800054c:	4299      	cmp	r1, r3
 800054e:	d002      	beq.n	8000556 <cleanup_stdio+0x1e>
 8000550:	4620      	mov	r0, r4
 8000552:	f000 fb9f 	bl	8000c94 <_fflush_r>
 8000556:	68e1      	ldr	r1, [r4, #12]
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <cleanup_stdio+0x3c>)
 800055a:	4299      	cmp	r1, r3
 800055c:	d004      	beq.n	8000568 <cleanup_stdio+0x30>
 800055e:	4620      	mov	r0, r4
 8000560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000564:	f000 bb96 	b.w	8000c94 <_fflush_r>
 8000568:	bd10      	pop	{r4, pc}
 800056a:	bf00      	nop
 800056c:	2000007c 	.word	0x2000007c
 8000570:	200000e4 	.word	0x200000e4
 8000574:	2000014c 	.word	0x2000014c

08000578 <global_stdio_init.part.0>:
 8000578:	b510      	push	{r4, lr}
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <global_stdio_init.part.0+0x30>)
 800057c:	4c0b      	ldr	r4, [pc, #44]	@ (80005ac <global_stdio_init.part.0+0x34>)
 800057e:	4a0c      	ldr	r2, [pc, #48]	@ (80005b0 <global_stdio_init.part.0+0x38>)
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	4620      	mov	r0, r4
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	f7ff ff94 	bl	80004b4 <std>
 800058c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000590:	2201      	movs	r2, #1
 8000592:	2109      	movs	r1, #9
 8000594:	f7ff ff8e 	bl	80004b4 <std>
 8000598:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800059c:	2202      	movs	r2, #2
 800059e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a2:	2112      	movs	r1, #18
 80005a4:	f7ff bf86 	b.w	80004b4 <std>
 80005a8:	200001b4 	.word	0x200001b4
 80005ac:	2000007c 	.word	0x2000007c
 80005b0:	08000521 	.word	0x08000521

080005b4 <__sfp_lock_acquire>:
 80005b4:	4801      	ldr	r0, [pc, #4]	@ (80005bc <__sfp_lock_acquire+0x8>)
 80005b6:	f000 b9ee 	b.w	8000996 <__retarget_lock_acquire_recursive>
 80005ba:	bf00      	nop
 80005bc:	200001bd 	.word	0x200001bd

080005c0 <__sfp_lock_release>:
 80005c0:	4801      	ldr	r0, [pc, #4]	@ (80005c8 <__sfp_lock_release+0x8>)
 80005c2:	f000 b9e9 	b.w	8000998 <__retarget_lock_release_recursive>
 80005c6:	bf00      	nop
 80005c8:	200001bd 	.word	0x200001bd

080005cc <__sinit>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	4604      	mov	r4, r0
 80005d0:	f7ff fff0 	bl	80005b4 <__sfp_lock_acquire>
 80005d4:	6a23      	ldr	r3, [r4, #32]
 80005d6:	b11b      	cbz	r3, 80005e0 <__sinit+0x14>
 80005d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005dc:	f7ff bff0 	b.w	80005c0 <__sfp_lock_release>
 80005e0:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <__sinit+0x28>)
 80005e2:	6223      	str	r3, [r4, #32]
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <__sinit+0x2c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f5      	bne.n	80005d8 <__sinit+0xc>
 80005ec:	f7ff ffc4 	bl	8000578 <global_stdio_init.part.0>
 80005f0:	e7f2      	b.n	80005d8 <__sinit+0xc>
 80005f2:	bf00      	nop
 80005f4:	08000539 	.word	0x08000539
 80005f8:	200001b4 	.word	0x200001b4

080005fc <_fwalk_sglue>:
 80005fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000600:	4607      	mov	r7, r0
 8000602:	4688      	mov	r8, r1
 8000604:	4614      	mov	r4, r2
 8000606:	2600      	movs	r6, #0
 8000608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800060c:	f1b9 0901 	subs.w	r9, r9, #1
 8000610:	d505      	bpl.n	800061e <_fwalk_sglue+0x22>
 8000612:	6824      	ldr	r4, [r4, #0]
 8000614:	2c00      	cmp	r4, #0
 8000616:	d1f7      	bne.n	8000608 <_fwalk_sglue+0xc>
 8000618:	4630      	mov	r0, r6
 800061a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800061e:	89ab      	ldrh	r3, [r5, #12]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d907      	bls.n	8000634 <_fwalk_sglue+0x38>
 8000624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000628:	3301      	adds	r3, #1
 800062a:	d003      	beq.n	8000634 <_fwalk_sglue+0x38>
 800062c:	4629      	mov	r1, r5
 800062e:	4638      	mov	r0, r7
 8000630:	47c0      	blx	r8
 8000632:	4306      	orrs	r6, r0
 8000634:	3568      	adds	r5, #104	@ 0x68
 8000636:	e7e9      	b.n	800060c <_fwalk_sglue+0x10>

08000638 <_puts_r>:
 8000638:	6a03      	ldr	r3, [r0, #32]
 800063a:	b570      	push	{r4, r5, r6, lr}
 800063c:	6884      	ldr	r4, [r0, #8]
 800063e:	4605      	mov	r5, r0
 8000640:	460e      	mov	r6, r1
 8000642:	b90b      	cbnz	r3, 8000648 <_puts_r+0x10>
 8000644:	f7ff ffc2 	bl	80005cc <__sinit>
 8000648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800064a:	07db      	lsls	r3, r3, #31
 800064c:	d405      	bmi.n	800065a <_puts_r+0x22>
 800064e:	89a3      	ldrh	r3, [r4, #12]
 8000650:	0598      	lsls	r0, r3, #22
 8000652:	d402      	bmi.n	800065a <_puts_r+0x22>
 8000654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000656:	f000 f99e 	bl	8000996 <__retarget_lock_acquire_recursive>
 800065a:	89a3      	ldrh	r3, [r4, #12]
 800065c:	0719      	lsls	r1, r3, #28
 800065e:	d502      	bpl.n	8000666 <_puts_r+0x2e>
 8000660:	6923      	ldr	r3, [r4, #16]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d135      	bne.n	80006d2 <_puts_r+0x9a>
 8000666:	4621      	mov	r1, r4
 8000668:	4628      	mov	r0, r5
 800066a:	f000 f8c5 	bl	80007f8 <__swsetup_r>
 800066e:	b380      	cbz	r0, 80006d2 <_puts_r+0x9a>
 8000670:	f04f 35ff 	mov.w	r5, #4294967295
 8000674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000676:	07da      	lsls	r2, r3, #31
 8000678:	d405      	bmi.n	8000686 <_puts_r+0x4e>
 800067a:	89a3      	ldrh	r3, [r4, #12]
 800067c:	059b      	lsls	r3, r3, #22
 800067e:	d402      	bmi.n	8000686 <_puts_r+0x4e>
 8000680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000682:	f000 f989 	bl	8000998 <__retarget_lock_release_recursive>
 8000686:	4628      	mov	r0, r5
 8000688:	bd70      	pop	{r4, r5, r6, pc}
 800068a:	2b00      	cmp	r3, #0
 800068c:	da04      	bge.n	8000698 <_puts_r+0x60>
 800068e:	69a2      	ldr	r2, [r4, #24]
 8000690:	429a      	cmp	r2, r3
 8000692:	dc17      	bgt.n	80006c4 <_puts_r+0x8c>
 8000694:	290a      	cmp	r1, #10
 8000696:	d015      	beq.n	80006c4 <_puts_r+0x8c>
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	6022      	str	r2, [r4, #0]
 800069e:	7019      	strb	r1, [r3, #0]
 80006a0:	68a3      	ldr	r3, [r4, #8]
 80006a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006a6:	3b01      	subs	r3, #1
 80006a8:	60a3      	str	r3, [r4, #8]
 80006aa:	2900      	cmp	r1, #0
 80006ac:	d1ed      	bne.n	800068a <_puts_r+0x52>
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	da11      	bge.n	80006d6 <_puts_r+0x9e>
 80006b2:	4622      	mov	r2, r4
 80006b4:	210a      	movs	r1, #10
 80006b6:	4628      	mov	r0, r5
 80006b8:	f000 f85f 	bl	800077a <__swbuf_r>
 80006bc:	3001      	adds	r0, #1
 80006be:	d0d7      	beq.n	8000670 <_puts_r+0x38>
 80006c0:	250a      	movs	r5, #10
 80006c2:	e7d7      	b.n	8000674 <_puts_r+0x3c>
 80006c4:	4622      	mov	r2, r4
 80006c6:	4628      	mov	r0, r5
 80006c8:	f000 f857 	bl	800077a <__swbuf_r>
 80006cc:	3001      	adds	r0, #1
 80006ce:	d1e7      	bne.n	80006a0 <_puts_r+0x68>
 80006d0:	e7ce      	b.n	8000670 <_puts_r+0x38>
 80006d2:	3e01      	subs	r6, #1
 80006d4:	e7e4      	b.n	80006a0 <_puts_r+0x68>
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	6022      	str	r2, [r4, #0]
 80006dc:	220a      	movs	r2, #10
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e7ee      	b.n	80006c0 <_puts_r+0x88>
	...

080006e4 <puts>:
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <puts+0xc>)
 80006e6:	4601      	mov	r1, r0
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	f7ff bfa5 	b.w	8000638 <_puts_r>
 80006ee:	bf00      	nop
 80006f0:	2000000c 	.word	0x2000000c

080006f4 <__sread>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	460c      	mov	r4, r1
 80006f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006fc:	f000 f8fc 	bl	80008f8 <_read_r>
 8000700:	2800      	cmp	r0, #0
 8000702:	bfab      	itete	ge
 8000704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000706:	89a3      	ldrhlt	r3, [r4, #12]
 8000708:	181b      	addge	r3, r3, r0
 800070a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800070e:	bfac      	ite	ge
 8000710:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000712:	81a3      	strhlt	r3, [r4, #12]
 8000714:	bd10      	pop	{r4, pc}

08000716 <__swrite>:
 8000716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800071a:	461f      	mov	r7, r3
 800071c:	898b      	ldrh	r3, [r1, #12]
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	4605      	mov	r5, r0
 8000722:	460c      	mov	r4, r1
 8000724:	4616      	mov	r6, r2
 8000726:	d505      	bpl.n	8000734 <__swrite+0x1e>
 8000728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800072c:	2302      	movs	r3, #2
 800072e:	2200      	movs	r2, #0
 8000730:	f000 f8d0 	bl	80008d4 <_lseek_r>
 8000734:	89a3      	ldrh	r3, [r4, #12]
 8000736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800073a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800073e:	81a3      	strh	r3, [r4, #12]
 8000740:	4632      	mov	r2, r6
 8000742:	463b      	mov	r3, r7
 8000744:	4628      	mov	r0, r5
 8000746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800074a:	f000 b8e7 	b.w	800091c <_write_r>

0800074e <__sseek>:
 800074e:	b510      	push	{r4, lr}
 8000750:	460c      	mov	r4, r1
 8000752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000756:	f000 f8bd 	bl	80008d4 <_lseek_r>
 800075a:	1c43      	adds	r3, r0, #1
 800075c:	89a3      	ldrh	r3, [r4, #12]
 800075e:	bf15      	itete	ne
 8000760:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800076a:	81a3      	strheq	r3, [r4, #12]
 800076c:	bf18      	it	ne
 800076e:	81a3      	strhne	r3, [r4, #12]
 8000770:	bd10      	pop	{r4, pc}

08000772 <__sclose>:
 8000772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000776:	f000 b89d 	b.w	80008b4 <_close_r>

0800077a <__swbuf_r>:
 800077a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077c:	460e      	mov	r6, r1
 800077e:	4614      	mov	r4, r2
 8000780:	4605      	mov	r5, r0
 8000782:	b118      	cbz	r0, 800078c <__swbuf_r+0x12>
 8000784:	6a03      	ldr	r3, [r0, #32]
 8000786:	b90b      	cbnz	r3, 800078c <__swbuf_r+0x12>
 8000788:	f7ff ff20 	bl	80005cc <__sinit>
 800078c:	69a3      	ldr	r3, [r4, #24]
 800078e:	60a3      	str	r3, [r4, #8]
 8000790:	89a3      	ldrh	r3, [r4, #12]
 8000792:	071a      	lsls	r2, r3, #28
 8000794:	d501      	bpl.n	800079a <__swbuf_r+0x20>
 8000796:	6923      	ldr	r3, [r4, #16]
 8000798:	b943      	cbnz	r3, 80007ac <__swbuf_r+0x32>
 800079a:	4621      	mov	r1, r4
 800079c:	4628      	mov	r0, r5
 800079e:	f000 f82b 	bl	80007f8 <__swsetup_r>
 80007a2:	b118      	cbz	r0, 80007ac <__swbuf_r+0x32>
 80007a4:	f04f 37ff 	mov.w	r7, #4294967295
 80007a8:	4638      	mov	r0, r7
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	6922      	ldr	r2, [r4, #16]
 80007b0:	1a98      	subs	r0, r3, r2
 80007b2:	6963      	ldr	r3, [r4, #20]
 80007b4:	b2f6      	uxtb	r6, r6
 80007b6:	4283      	cmp	r3, r0
 80007b8:	4637      	mov	r7, r6
 80007ba:	dc05      	bgt.n	80007c8 <__swbuf_r+0x4e>
 80007bc:	4621      	mov	r1, r4
 80007be:	4628      	mov	r0, r5
 80007c0:	f000 fa68 	bl	8000c94 <_fflush_r>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d1ed      	bne.n	80007a4 <__swbuf_r+0x2a>
 80007c8:	68a3      	ldr	r3, [r4, #8]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	60a3      	str	r3, [r4, #8]
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	6022      	str	r2, [r4, #0]
 80007d4:	701e      	strb	r6, [r3, #0]
 80007d6:	6962      	ldr	r2, [r4, #20]
 80007d8:	1c43      	adds	r3, r0, #1
 80007da:	429a      	cmp	r2, r3
 80007dc:	d004      	beq.n	80007e8 <__swbuf_r+0x6e>
 80007de:	89a3      	ldrh	r3, [r4, #12]
 80007e0:	07db      	lsls	r3, r3, #31
 80007e2:	d5e1      	bpl.n	80007a8 <__swbuf_r+0x2e>
 80007e4:	2e0a      	cmp	r6, #10
 80007e6:	d1df      	bne.n	80007a8 <__swbuf_r+0x2e>
 80007e8:	4621      	mov	r1, r4
 80007ea:	4628      	mov	r0, r5
 80007ec:	f000 fa52 	bl	8000c94 <_fflush_r>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d0d9      	beq.n	80007a8 <__swbuf_r+0x2e>
 80007f4:	e7d6      	b.n	80007a4 <__swbuf_r+0x2a>
	...

080007f8 <__swsetup_r>:
 80007f8:	b538      	push	{r3, r4, r5, lr}
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <__swsetup_r+0xa8>)
 80007fc:	4605      	mov	r5, r0
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	460c      	mov	r4, r1
 8000802:	b118      	cbz	r0, 800080c <__swsetup_r+0x14>
 8000804:	6a03      	ldr	r3, [r0, #32]
 8000806:	b90b      	cbnz	r3, 800080c <__swsetup_r+0x14>
 8000808:	f7ff fee0 	bl	80005cc <__sinit>
 800080c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000810:	0719      	lsls	r1, r3, #28
 8000812:	d422      	bmi.n	800085a <__swsetup_r+0x62>
 8000814:	06da      	lsls	r2, r3, #27
 8000816:	d407      	bmi.n	8000828 <__swsetup_r+0x30>
 8000818:	2209      	movs	r2, #9
 800081a:	602a      	str	r2, [r5, #0]
 800081c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000820:	81a3      	strh	r3, [r4, #12]
 8000822:	f04f 30ff 	mov.w	r0, #4294967295
 8000826:	e033      	b.n	8000890 <__swsetup_r+0x98>
 8000828:	0758      	lsls	r0, r3, #29
 800082a:	d512      	bpl.n	8000852 <__swsetup_r+0x5a>
 800082c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800082e:	b141      	cbz	r1, 8000842 <__swsetup_r+0x4a>
 8000830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000834:	4299      	cmp	r1, r3
 8000836:	d002      	beq.n	800083e <__swsetup_r+0x46>
 8000838:	4628      	mov	r0, r5
 800083a:	f000 f8af 	bl	800099c <_free_r>
 800083e:	2300      	movs	r3, #0
 8000840:	6363      	str	r3, [r4, #52]	@ 0x34
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000848:	81a3      	strh	r3, [r4, #12]
 800084a:	2300      	movs	r3, #0
 800084c:	6063      	str	r3, [r4, #4]
 800084e:	6923      	ldr	r3, [r4, #16]
 8000850:	6023      	str	r3, [r4, #0]
 8000852:	89a3      	ldrh	r3, [r4, #12]
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	81a3      	strh	r3, [r4, #12]
 800085a:	6923      	ldr	r3, [r4, #16]
 800085c:	b94b      	cbnz	r3, 8000872 <__swsetup_r+0x7a>
 800085e:	89a3      	ldrh	r3, [r4, #12]
 8000860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000868:	d003      	beq.n	8000872 <__swsetup_r+0x7a>
 800086a:	4621      	mov	r1, r4
 800086c:	4628      	mov	r0, r5
 800086e:	f000 fa5f 	bl	8000d30 <__smakebuf_r>
 8000872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000876:	f013 0201 	ands.w	r2, r3, #1
 800087a:	d00a      	beq.n	8000892 <__swsetup_r+0x9a>
 800087c:	2200      	movs	r2, #0
 800087e:	60a2      	str	r2, [r4, #8]
 8000880:	6962      	ldr	r2, [r4, #20]
 8000882:	4252      	negs	r2, r2
 8000884:	61a2      	str	r2, [r4, #24]
 8000886:	6922      	ldr	r2, [r4, #16]
 8000888:	b942      	cbnz	r2, 800089c <__swsetup_r+0xa4>
 800088a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800088e:	d1c5      	bne.n	800081c <__swsetup_r+0x24>
 8000890:	bd38      	pop	{r3, r4, r5, pc}
 8000892:	0799      	lsls	r1, r3, #30
 8000894:	bf58      	it	pl
 8000896:	6962      	ldrpl	r2, [r4, #20]
 8000898:	60a2      	str	r2, [r4, #8]
 800089a:	e7f4      	b.n	8000886 <__swsetup_r+0x8e>
 800089c:	2000      	movs	r0, #0
 800089e:	e7f7      	b.n	8000890 <__swsetup_r+0x98>
 80008a0:	2000000c 	.word	0x2000000c

080008a4 <memset>:
 80008a4:	4402      	add	r2, r0
 80008a6:	4603      	mov	r3, r0
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d100      	bne.n	80008ae <memset+0xa>
 80008ac:	4770      	bx	lr
 80008ae:	f803 1b01 	strb.w	r1, [r3], #1
 80008b2:	e7f9      	b.n	80008a8 <memset+0x4>

080008b4 <_close_r>:
 80008b4:	b538      	push	{r3, r4, r5, lr}
 80008b6:	4d06      	ldr	r5, [pc, #24]	@ (80008d0 <_close_r+0x1c>)
 80008b8:	2300      	movs	r3, #0
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	602b      	str	r3, [r5, #0]
 80008c0:	f7ff fccd 	bl	800025e <_close>
 80008c4:	1c43      	adds	r3, r0, #1
 80008c6:	d102      	bne.n	80008ce <_close_r+0x1a>
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	b103      	cbz	r3, 80008ce <_close_r+0x1a>
 80008cc:	6023      	str	r3, [r4, #0]
 80008ce:	bd38      	pop	{r3, r4, r5, pc}
 80008d0:	200001b8 	.word	0x200001b8

080008d4 <_lseek_r>:
 80008d4:	b538      	push	{r3, r4, r5, lr}
 80008d6:	4d07      	ldr	r5, [pc, #28]	@ (80008f4 <_lseek_r+0x20>)
 80008d8:	4604      	mov	r4, r0
 80008da:	4608      	mov	r0, r1
 80008dc:	4611      	mov	r1, r2
 80008de:	2200      	movs	r2, #0
 80008e0:	602a      	str	r2, [r5, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	f7ff fce2 	bl	80002ac <_lseek>
 80008e8:	1c43      	adds	r3, r0, #1
 80008ea:	d102      	bne.n	80008f2 <_lseek_r+0x1e>
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	b103      	cbz	r3, 80008f2 <_lseek_r+0x1e>
 80008f0:	6023      	str	r3, [r4, #0]
 80008f2:	bd38      	pop	{r3, r4, r5, pc}
 80008f4:	200001b8 	.word	0x200001b8

080008f8 <_read_r>:
 80008f8:	b538      	push	{r3, r4, r5, lr}
 80008fa:	4d07      	ldr	r5, [pc, #28]	@ (8000918 <_read_r+0x20>)
 80008fc:	4604      	mov	r4, r0
 80008fe:	4608      	mov	r0, r1
 8000900:	4611      	mov	r1, r2
 8000902:	2200      	movs	r2, #0
 8000904:	602a      	str	r2, [r5, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	f7ff fc70 	bl	80001ec <_read>
 800090c:	1c43      	adds	r3, r0, #1
 800090e:	d102      	bne.n	8000916 <_read_r+0x1e>
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	b103      	cbz	r3, 8000916 <_read_r+0x1e>
 8000914:	6023      	str	r3, [r4, #0]
 8000916:	bd38      	pop	{r3, r4, r5, pc}
 8000918:	200001b8 	.word	0x200001b8

0800091c <_write_r>:
 800091c:	b538      	push	{r3, r4, r5, lr}
 800091e:	4d07      	ldr	r5, [pc, #28]	@ (800093c <_write_r+0x20>)
 8000920:	4604      	mov	r4, r0
 8000922:	4608      	mov	r0, r1
 8000924:	4611      	mov	r1, r2
 8000926:	2200      	movs	r2, #0
 8000928:	602a      	str	r2, [r5, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	f7ff fc7b 	bl	8000226 <_write>
 8000930:	1c43      	adds	r3, r0, #1
 8000932:	d102      	bne.n	800093a <_write_r+0x1e>
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	b103      	cbz	r3, 800093a <_write_r+0x1e>
 8000938:	6023      	str	r3, [r4, #0]
 800093a:	bd38      	pop	{r3, r4, r5, pc}
 800093c:	200001b8 	.word	0x200001b8

08000940 <__errno>:
 8000940:	4b01      	ldr	r3, [pc, #4]	@ (8000948 <__errno+0x8>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	2000000c 	.word	0x2000000c

0800094c <__libc_init_array>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	4d0d      	ldr	r5, [pc, #52]	@ (8000984 <__libc_init_array+0x38>)
 8000950:	4c0d      	ldr	r4, [pc, #52]	@ (8000988 <__libc_init_array+0x3c>)
 8000952:	1b64      	subs	r4, r4, r5
 8000954:	10a4      	asrs	r4, r4, #2
 8000956:	2600      	movs	r6, #0
 8000958:	42a6      	cmp	r6, r4
 800095a:	d109      	bne.n	8000970 <__libc_init_array+0x24>
 800095c:	4d0b      	ldr	r5, [pc, #44]	@ (800098c <__libc_init_array+0x40>)
 800095e:	4c0c      	ldr	r4, [pc, #48]	@ (8000990 <__libc_init_array+0x44>)
 8000960:	f000 fa54 	bl	8000e0c <_init>
 8000964:	1b64      	subs	r4, r4, r5
 8000966:	10a4      	asrs	r4, r4, #2
 8000968:	2600      	movs	r6, #0
 800096a:	42a6      	cmp	r6, r4
 800096c:	d105      	bne.n	800097a <__libc_init_array+0x2e>
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	f855 3b04 	ldr.w	r3, [r5], #4
 8000974:	4798      	blx	r3
 8000976:	3601      	adds	r6, #1
 8000978:	e7ee      	b.n	8000958 <__libc_init_array+0xc>
 800097a:	f855 3b04 	ldr.w	r3, [r5], #4
 800097e:	4798      	blx	r3
 8000980:	3601      	adds	r6, #1
 8000982:	e7f2      	b.n	800096a <__libc_init_array+0x1e>
 8000984:	08000e3c 	.word	0x08000e3c
 8000988:	08000e3c 	.word	0x08000e3c
 800098c:	08000e3c 	.word	0x08000e3c
 8000990:	08000e40 	.word	0x08000e40

08000994 <__retarget_lock_init_recursive>:
 8000994:	4770      	bx	lr

08000996 <__retarget_lock_acquire_recursive>:
 8000996:	4770      	bx	lr

08000998 <__retarget_lock_release_recursive>:
 8000998:	4770      	bx	lr
	...

0800099c <_free_r>:
 800099c:	b538      	push	{r3, r4, r5, lr}
 800099e:	4605      	mov	r5, r0
 80009a0:	2900      	cmp	r1, #0
 80009a2:	d041      	beq.n	8000a28 <_free_r+0x8c>
 80009a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009a8:	1f0c      	subs	r4, r1, #4
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	bfb8      	it	lt
 80009ae:	18e4      	addlt	r4, r4, r3
 80009b0:	f000 f8e0 	bl	8000b74 <__malloc_lock>
 80009b4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <_free_r+0x90>)
 80009b6:	6813      	ldr	r3, [r2, #0]
 80009b8:	b933      	cbnz	r3, 80009c8 <_free_r+0x2c>
 80009ba:	6063      	str	r3, [r4, #4]
 80009bc:	6014      	str	r4, [r2, #0]
 80009be:	4628      	mov	r0, r5
 80009c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009c4:	f000 b8dc 	b.w	8000b80 <__malloc_unlock>
 80009c8:	42a3      	cmp	r3, r4
 80009ca:	d908      	bls.n	80009de <_free_r+0x42>
 80009cc:	6820      	ldr	r0, [r4, #0]
 80009ce:	1821      	adds	r1, r4, r0
 80009d0:	428b      	cmp	r3, r1
 80009d2:	bf01      	itttt	eq
 80009d4:	6819      	ldreq	r1, [r3, #0]
 80009d6:	685b      	ldreq	r3, [r3, #4]
 80009d8:	1809      	addeq	r1, r1, r0
 80009da:	6021      	streq	r1, [r4, #0]
 80009dc:	e7ed      	b.n	80009ba <_free_r+0x1e>
 80009de:	461a      	mov	r2, r3
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	b10b      	cbz	r3, 80009e8 <_free_r+0x4c>
 80009e4:	42a3      	cmp	r3, r4
 80009e6:	d9fa      	bls.n	80009de <_free_r+0x42>
 80009e8:	6811      	ldr	r1, [r2, #0]
 80009ea:	1850      	adds	r0, r2, r1
 80009ec:	42a0      	cmp	r0, r4
 80009ee:	d10b      	bne.n	8000a08 <_free_r+0x6c>
 80009f0:	6820      	ldr	r0, [r4, #0]
 80009f2:	4401      	add	r1, r0
 80009f4:	1850      	adds	r0, r2, r1
 80009f6:	4283      	cmp	r3, r0
 80009f8:	6011      	str	r1, [r2, #0]
 80009fa:	d1e0      	bne.n	80009be <_free_r+0x22>
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	6053      	str	r3, [r2, #4]
 8000a02:	4408      	add	r0, r1
 8000a04:	6010      	str	r0, [r2, #0]
 8000a06:	e7da      	b.n	80009be <_free_r+0x22>
 8000a08:	d902      	bls.n	8000a10 <_free_r+0x74>
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	602b      	str	r3, [r5, #0]
 8000a0e:	e7d6      	b.n	80009be <_free_r+0x22>
 8000a10:	6820      	ldr	r0, [r4, #0]
 8000a12:	1821      	adds	r1, r4, r0
 8000a14:	428b      	cmp	r3, r1
 8000a16:	bf04      	itt	eq
 8000a18:	6819      	ldreq	r1, [r3, #0]
 8000a1a:	685b      	ldreq	r3, [r3, #4]
 8000a1c:	6063      	str	r3, [r4, #4]
 8000a1e:	bf04      	itt	eq
 8000a20:	1809      	addeq	r1, r1, r0
 8000a22:	6021      	streq	r1, [r4, #0]
 8000a24:	6054      	str	r4, [r2, #4]
 8000a26:	e7ca      	b.n	80009be <_free_r+0x22>
 8000a28:	bd38      	pop	{r3, r4, r5, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001c4 	.word	0x200001c4

08000a30 <sbrk_aligned>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	4e0f      	ldr	r6, [pc, #60]	@ (8000a70 <sbrk_aligned+0x40>)
 8000a34:	460c      	mov	r4, r1
 8000a36:	6831      	ldr	r1, [r6, #0]
 8000a38:	4605      	mov	r5, r0
 8000a3a:	b911      	cbnz	r1, 8000a42 <sbrk_aligned+0x12>
 8000a3c:	f000 f9d6 	bl	8000dec <_sbrk_r>
 8000a40:	6030      	str	r0, [r6, #0]
 8000a42:	4621      	mov	r1, r4
 8000a44:	4628      	mov	r0, r5
 8000a46:	f000 f9d1 	bl	8000dec <_sbrk_r>
 8000a4a:	1c43      	adds	r3, r0, #1
 8000a4c:	d103      	bne.n	8000a56 <sbrk_aligned+0x26>
 8000a4e:	f04f 34ff 	mov.w	r4, #4294967295
 8000a52:	4620      	mov	r0, r4
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
 8000a56:	1cc4      	adds	r4, r0, #3
 8000a58:	f024 0403 	bic.w	r4, r4, #3
 8000a5c:	42a0      	cmp	r0, r4
 8000a5e:	d0f8      	beq.n	8000a52 <sbrk_aligned+0x22>
 8000a60:	1a21      	subs	r1, r4, r0
 8000a62:	4628      	mov	r0, r5
 8000a64:	f000 f9c2 	bl	8000dec <_sbrk_r>
 8000a68:	3001      	adds	r0, #1
 8000a6a:	d1f2      	bne.n	8000a52 <sbrk_aligned+0x22>
 8000a6c:	e7ef      	b.n	8000a4e <sbrk_aligned+0x1e>
 8000a6e:	bf00      	nop
 8000a70:	200001c0 	.word	0x200001c0

08000a74 <_malloc_r>:
 8000a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a78:	1ccd      	adds	r5, r1, #3
 8000a7a:	f025 0503 	bic.w	r5, r5, #3
 8000a7e:	3508      	adds	r5, #8
 8000a80:	2d0c      	cmp	r5, #12
 8000a82:	bf38      	it	cc
 8000a84:	250c      	movcc	r5, #12
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	4606      	mov	r6, r0
 8000a8a:	db01      	blt.n	8000a90 <_malloc_r+0x1c>
 8000a8c:	42a9      	cmp	r1, r5
 8000a8e:	d904      	bls.n	8000a9a <_malloc_r+0x26>
 8000a90:	230c      	movs	r3, #12
 8000a92:	6033      	str	r3, [r6, #0]
 8000a94:	2000      	movs	r0, #0
 8000a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b70 <_malloc_r+0xfc>
 8000a9e:	f000 f869 	bl	8000b74 <__malloc_lock>
 8000aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8000aa6:	461c      	mov	r4, r3
 8000aa8:	bb44      	cbnz	r4, 8000afc <_malloc_r+0x88>
 8000aaa:	4629      	mov	r1, r5
 8000aac:	4630      	mov	r0, r6
 8000aae:	f7ff ffbf 	bl	8000a30 <sbrk_aligned>
 8000ab2:	1c43      	adds	r3, r0, #1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	d158      	bne.n	8000b6a <_malloc_r+0xf6>
 8000ab8:	f8d8 4000 	ldr.w	r4, [r8]
 8000abc:	4627      	mov	r7, r4
 8000abe:	2f00      	cmp	r7, #0
 8000ac0:	d143      	bne.n	8000b4a <_malloc_r+0xd6>
 8000ac2:	2c00      	cmp	r4, #0
 8000ac4:	d04b      	beq.n	8000b5e <_malloc_r+0xea>
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	4639      	mov	r1, r7
 8000aca:	4630      	mov	r0, r6
 8000acc:	eb04 0903 	add.w	r9, r4, r3
 8000ad0:	f000 f98c 	bl	8000dec <_sbrk_r>
 8000ad4:	4581      	cmp	r9, r0
 8000ad6:	d142      	bne.n	8000b5e <_malloc_r+0xea>
 8000ad8:	6821      	ldr	r1, [r4, #0]
 8000ada:	1a6d      	subs	r5, r5, r1
 8000adc:	4629      	mov	r1, r5
 8000ade:	4630      	mov	r0, r6
 8000ae0:	f7ff ffa6 	bl	8000a30 <sbrk_aligned>
 8000ae4:	3001      	adds	r0, #1
 8000ae6:	d03a      	beq.n	8000b5e <_malloc_r+0xea>
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	442b      	add	r3, r5
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	f8d8 3000 	ldr.w	r3, [r8]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	bb62      	cbnz	r2, 8000b50 <_malloc_r+0xdc>
 8000af6:	f8c8 7000 	str.w	r7, [r8]
 8000afa:	e00f      	b.n	8000b1c <_malloc_r+0xa8>
 8000afc:	6822      	ldr	r2, [r4, #0]
 8000afe:	1b52      	subs	r2, r2, r5
 8000b00:	d420      	bmi.n	8000b44 <_malloc_r+0xd0>
 8000b02:	2a0b      	cmp	r2, #11
 8000b04:	d917      	bls.n	8000b36 <_malloc_r+0xc2>
 8000b06:	1961      	adds	r1, r4, r5
 8000b08:	42a3      	cmp	r3, r4
 8000b0a:	6025      	str	r5, [r4, #0]
 8000b0c:	bf18      	it	ne
 8000b0e:	6059      	strne	r1, [r3, #4]
 8000b10:	6863      	ldr	r3, [r4, #4]
 8000b12:	bf08      	it	eq
 8000b14:	f8c8 1000 	streq.w	r1, [r8]
 8000b18:	5162      	str	r2, [r4, r5]
 8000b1a:	604b      	str	r3, [r1, #4]
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	f000 f82f 	bl	8000b80 <__malloc_unlock>
 8000b22:	f104 000b 	add.w	r0, r4, #11
 8000b26:	1d23      	adds	r3, r4, #4
 8000b28:	f020 0007 	bic.w	r0, r0, #7
 8000b2c:	1ac2      	subs	r2, r0, r3
 8000b2e:	bf1c      	itt	ne
 8000b30:	1a1b      	subne	r3, r3, r0
 8000b32:	50a3      	strne	r3, [r4, r2]
 8000b34:	e7af      	b.n	8000a96 <_malloc_r+0x22>
 8000b36:	6862      	ldr	r2, [r4, #4]
 8000b38:	42a3      	cmp	r3, r4
 8000b3a:	bf0c      	ite	eq
 8000b3c:	f8c8 2000 	streq.w	r2, [r8]
 8000b40:	605a      	strne	r2, [r3, #4]
 8000b42:	e7eb      	b.n	8000b1c <_malloc_r+0xa8>
 8000b44:	4623      	mov	r3, r4
 8000b46:	6864      	ldr	r4, [r4, #4]
 8000b48:	e7ae      	b.n	8000aa8 <_malloc_r+0x34>
 8000b4a:	463c      	mov	r4, r7
 8000b4c:	687f      	ldr	r7, [r7, #4]
 8000b4e:	e7b6      	b.n	8000abe <_malloc_r+0x4a>
 8000b50:	461a      	mov	r2, r3
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	42a3      	cmp	r3, r4
 8000b56:	d1fb      	bne.n	8000b50 <_malloc_r+0xdc>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	6053      	str	r3, [r2, #4]
 8000b5c:	e7de      	b.n	8000b1c <_malloc_r+0xa8>
 8000b5e:	230c      	movs	r3, #12
 8000b60:	6033      	str	r3, [r6, #0]
 8000b62:	4630      	mov	r0, r6
 8000b64:	f000 f80c 	bl	8000b80 <__malloc_unlock>
 8000b68:	e794      	b.n	8000a94 <_malloc_r+0x20>
 8000b6a:	6005      	str	r5, [r0, #0]
 8000b6c:	e7d6      	b.n	8000b1c <_malloc_r+0xa8>
 8000b6e:	bf00      	nop
 8000b70:	200001c4 	.word	0x200001c4

08000b74 <__malloc_lock>:
 8000b74:	4801      	ldr	r0, [pc, #4]	@ (8000b7c <__malloc_lock+0x8>)
 8000b76:	f7ff bf0e 	b.w	8000996 <__retarget_lock_acquire_recursive>
 8000b7a:	bf00      	nop
 8000b7c:	200001bc 	.word	0x200001bc

08000b80 <__malloc_unlock>:
 8000b80:	4801      	ldr	r0, [pc, #4]	@ (8000b88 <__malloc_unlock+0x8>)
 8000b82:	f7ff bf09 	b.w	8000998 <__retarget_lock_release_recursive>
 8000b86:	bf00      	nop
 8000b88:	200001bc 	.word	0x200001bc

08000b8c <__sflush_r>:
 8000b8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b94:	0716      	lsls	r6, r2, #28
 8000b96:	4605      	mov	r5, r0
 8000b98:	460c      	mov	r4, r1
 8000b9a:	d454      	bmi.n	8000c46 <__sflush_r+0xba>
 8000b9c:	684b      	ldr	r3, [r1, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	dc02      	bgt.n	8000ba8 <__sflush_r+0x1c>
 8000ba2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	dd48      	ble.n	8000c3a <__sflush_r+0xae>
 8000ba8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d045      	beq.n	8000c3a <__sflush_r+0xae>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000bb4:	682f      	ldr	r7, [r5, #0]
 8000bb6:	6a21      	ldr	r1, [r4, #32]
 8000bb8:	602b      	str	r3, [r5, #0]
 8000bba:	d030      	beq.n	8000c1e <__sflush_r+0x92>
 8000bbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000bbe:	89a3      	ldrh	r3, [r4, #12]
 8000bc0:	0759      	lsls	r1, r3, #29
 8000bc2:	d505      	bpl.n	8000bd0 <__sflush_r+0x44>
 8000bc4:	6863      	ldr	r3, [r4, #4]
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000bca:	b10b      	cbz	r3, 8000bd0 <__sflush_r+0x44>
 8000bcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000bd4:	6a21      	ldr	r1, [r4, #32]
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	47b0      	blx	r6
 8000bda:	1c43      	adds	r3, r0, #1
 8000bdc:	89a3      	ldrh	r3, [r4, #12]
 8000bde:	d106      	bne.n	8000bee <__sflush_r+0x62>
 8000be0:	6829      	ldr	r1, [r5, #0]
 8000be2:	291d      	cmp	r1, #29
 8000be4:	d82b      	bhi.n	8000c3e <__sflush_r+0xb2>
 8000be6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <__sflush_r+0x104>)
 8000be8:	410a      	asrs	r2, r1
 8000bea:	07d6      	lsls	r6, r2, #31
 8000bec:	d427      	bmi.n	8000c3e <__sflush_r+0xb2>
 8000bee:	2200      	movs	r2, #0
 8000bf0:	6062      	str	r2, [r4, #4]
 8000bf2:	04d9      	lsls	r1, r3, #19
 8000bf4:	6922      	ldr	r2, [r4, #16]
 8000bf6:	6022      	str	r2, [r4, #0]
 8000bf8:	d504      	bpl.n	8000c04 <__sflush_r+0x78>
 8000bfa:	1c42      	adds	r2, r0, #1
 8000bfc:	d101      	bne.n	8000c02 <__sflush_r+0x76>
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	b903      	cbnz	r3, 8000c04 <__sflush_r+0x78>
 8000c02:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c06:	602f      	str	r7, [r5, #0]
 8000c08:	b1b9      	cbz	r1, 8000c3a <__sflush_r+0xae>
 8000c0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	d002      	beq.n	8000c18 <__sflush_r+0x8c>
 8000c12:	4628      	mov	r0, r5
 8000c14:	f7ff fec2 	bl	800099c <_free_r>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c1c:	e00d      	b.n	8000c3a <__sflush_r+0xae>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	4628      	mov	r0, r5
 8000c22:	47b0      	blx	r6
 8000c24:	4602      	mov	r2, r0
 8000c26:	1c50      	adds	r0, r2, #1
 8000c28:	d1c9      	bne.n	8000bbe <__sflush_r+0x32>
 8000c2a:	682b      	ldr	r3, [r5, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0c6      	beq.n	8000bbe <__sflush_r+0x32>
 8000c30:	2b1d      	cmp	r3, #29
 8000c32:	d001      	beq.n	8000c38 <__sflush_r+0xac>
 8000c34:	2b16      	cmp	r3, #22
 8000c36:	d11e      	bne.n	8000c76 <__sflush_r+0xea>
 8000c38:	602f      	str	r7, [r5, #0]
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	e022      	b.n	8000c84 <__sflush_r+0xf8>
 8000c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	e01b      	b.n	8000c7e <__sflush_r+0xf2>
 8000c46:	690f      	ldr	r7, [r1, #16]
 8000c48:	2f00      	cmp	r7, #0
 8000c4a:	d0f6      	beq.n	8000c3a <__sflush_r+0xae>
 8000c4c:	0793      	lsls	r3, r2, #30
 8000c4e:	680e      	ldr	r6, [r1, #0]
 8000c50:	bf08      	it	eq
 8000c52:	694b      	ldreq	r3, [r1, #20]
 8000c54:	600f      	str	r7, [r1, #0]
 8000c56:	bf18      	it	ne
 8000c58:	2300      	movne	r3, #0
 8000c5a:	eba6 0807 	sub.w	r8, r6, r7
 8000c5e:	608b      	str	r3, [r1, #8]
 8000c60:	f1b8 0f00 	cmp.w	r8, #0
 8000c64:	dde9      	ble.n	8000c3a <__sflush_r+0xae>
 8000c66:	6a21      	ldr	r1, [r4, #32]
 8000c68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000c6a:	4643      	mov	r3, r8
 8000c6c:	463a      	mov	r2, r7
 8000c6e:	4628      	mov	r0, r5
 8000c70:	47b0      	blx	r6
 8000c72:	2800      	cmp	r0, #0
 8000c74:	dc08      	bgt.n	8000c88 <__sflush_r+0xfc>
 8000c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c7e:	81a3      	strh	r3, [r4, #12]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c88:	4407      	add	r7, r0
 8000c8a:	eba8 0800 	sub.w	r8, r8, r0
 8000c8e:	e7e7      	b.n	8000c60 <__sflush_r+0xd4>
 8000c90:	dfbffffe 	.word	0xdfbffffe

08000c94 <_fflush_r>:
 8000c94:	b538      	push	{r3, r4, r5, lr}
 8000c96:	690b      	ldr	r3, [r1, #16]
 8000c98:	4605      	mov	r5, r0
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	b913      	cbnz	r3, 8000ca4 <_fflush_r+0x10>
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	bd38      	pop	{r3, r4, r5, pc}
 8000ca4:	b118      	cbz	r0, 8000cae <_fflush_r+0x1a>
 8000ca6:	6a03      	ldr	r3, [r0, #32]
 8000ca8:	b90b      	cbnz	r3, 8000cae <_fflush_r+0x1a>
 8000caa:	f7ff fc8f 	bl	80005cc <__sinit>
 8000cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f3      	beq.n	8000c9e <_fflush_r+0xa>
 8000cb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000cb8:	07d0      	lsls	r0, r2, #31
 8000cba:	d404      	bmi.n	8000cc6 <_fflush_r+0x32>
 8000cbc:	0599      	lsls	r1, r3, #22
 8000cbe:	d402      	bmi.n	8000cc6 <_fflush_r+0x32>
 8000cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cc2:	f7ff fe68 	bl	8000996 <__retarget_lock_acquire_recursive>
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	4621      	mov	r1, r4
 8000cca:	f7ff ff5f 	bl	8000b8c <__sflush_r>
 8000cce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000cd0:	07da      	lsls	r2, r3, #31
 8000cd2:	4605      	mov	r5, r0
 8000cd4:	d4e4      	bmi.n	8000ca0 <_fflush_r+0xc>
 8000cd6:	89a3      	ldrh	r3, [r4, #12]
 8000cd8:	059b      	lsls	r3, r3, #22
 8000cda:	d4e1      	bmi.n	8000ca0 <_fflush_r+0xc>
 8000cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cde:	f7ff fe5b 	bl	8000998 <__retarget_lock_release_recursive>
 8000ce2:	e7dd      	b.n	8000ca0 <_fflush_r+0xc>

08000ce4 <__swhatbuf_r>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cec:	2900      	cmp	r1, #0
 8000cee:	b096      	sub	sp, #88	@ 0x58
 8000cf0:	4615      	mov	r5, r2
 8000cf2:	461e      	mov	r6, r3
 8000cf4:	da0d      	bge.n	8000d12 <__swhatbuf_r+0x2e>
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000cfc:	f04f 0100 	mov.w	r1, #0
 8000d00:	bf14      	ite	ne
 8000d02:	2340      	movne	r3, #64	@ 0x40
 8000d04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d08:	2000      	movs	r0, #0
 8000d0a:	6031      	str	r1, [r6, #0]
 8000d0c:	602b      	str	r3, [r5, #0]
 8000d0e:	b016      	add	sp, #88	@ 0x58
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
 8000d12:	466a      	mov	r2, sp
 8000d14:	f000 f848 	bl	8000da8 <_fstat_r>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	dbec      	blt.n	8000cf6 <__swhatbuf_r+0x12>
 8000d1c:	9901      	ldr	r1, [sp, #4]
 8000d1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d26:	4259      	negs	r1, r3
 8000d28:	4159      	adcs	r1, r3
 8000d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2e:	e7eb      	b.n	8000d08 <__swhatbuf_r+0x24>

08000d30 <__smakebuf_r>:
 8000d30:	898b      	ldrh	r3, [r1, #12]
 8000d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d34:	079d      	lsls	r5, r3, #30
 8000d36:	4606      	mov	r6, r0
 8000d38:	460c      	mov	r4, r1
 8000d3a:	d507      	bpl.n	8000d4c <__smakebuf_r+0x1c>
 8000d3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	6123      	str	r3, [r4, #16]
 8000d44:	2301      	movs	r3, #1
 8000d46:	6163      	str	r3, [r4, #20]
 8000d48:	b003      	add	sp, #12
 8000d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4c:	ab01      	add	r3, sp, #4
 8000d4e:	466a      	mov	r2, sp
 8000d50:	f7ff ffc8 	bl	8000ce4 <__swhatbuf_r>
 8000d54:	9f00      	ldr	r7, [sp, #0]
 8000d56:	4605      	mov	r5, r0
 8000d58:	4639      	mov	r1, r7
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	f7ff fe8a 	bl	8000a74 <_malloc_r>
 8000d60:	b948      	cbnz	r0, 8000d76 <__smakebuf_r+0x46>
 8000d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d66:	059a      	lsls	r2, r3, #22
 8000d68:	d4ee      	bmi.n	8000d48 <__smakebuf_r+0x18>
 8000d6a:	f023 0303 	bic.w	r3, r3, #3
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	81a3      	strh	r3, [r4, #12]
 8000d74:	e7e2      	b.n	8000d3c <__smakebuf_r+0xc>
 8000d76:	89a3      	ldrh	r3, [r4, #12]
 8000d78:	6020      	str	r0, [r4, #0]
 8000d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7e:	81a3      	strh	r3, [r4, #12]
 8000d80:	9b01      	ldr	r3, [sp, #4]
 8000d82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d86:	b15b      	cbz	r3, 8000da0 <__smakebuf_r+0x70>
 8000d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	f000 f81d 	bl	8000dcc <_isatty_r>
 8000d92:	b128      	cbz	r0, 8000da0 <__smakebuf_r+0x70>
 8000d94:	89a3      	ldrh	r3, [r4, #12]
 8000d96:	f023 0303 	bic.w	r3, r3, #3
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	81a3      	strh	r3, [r4, #12]
 8000da0:	89a3      	ldrh	r3, [r4, #12]
 8000da2:	431d      	orrs	r5, r3
 8000da4:	81a5      	strh	r5, [r4, #12]
 8000da6:	e7cf      	b.n	8000d48 <__smakebuf_r+0x18>

08000da8 <_fstat_r>:
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	4d07      	ldr	r5, [pc, #28]	@ (8000dc8 <_fstat_r+0x20>)
 8000dac:	2300      	movs	r3, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	4608      	mov	r0, r1
 8000db2:	4611      	mov	r1, r2
 8000db4:	602b      	str	r3, [r5, #0]
 8000db6:	f7ff fa5e 	bl	8000276 <_fstat>
 8000dba:	1c43      	adds	r3, r0, #1
 8000dbc:	d102      	bne.n	8000dc4 <_fstat_r+0x1c>
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	b103      	cbz	r3, 8000dc4 <_fstat_r+0x1c>
 8000dc2:	6023      	str	r3, [r4, #0]
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001b8 	.word	0x200001b8

08000dcc <_isatty_r>:
 8000dcc:	b538      	push	{r3, r4, r5, lr}
 8000dce:	4d06      	ldr	r5, [pc, #24]	@ (8000de8 <_isatty_r+0x1c>)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	602b      	str	r3, [r5, #0]
 8000dd8:	f7ff fa5d 	bl	8000296 <_isatty>
 8000ddc:	1c43      	adds	r3, r0, #1
 8000dde:	d102      	bne.n	8000de6 <_isatty_r+0x1a>
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	b103      	cbz	r3, 8000de6 <_isatty_r+0x1a>
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	bd38      	pop	{r3, r4, r5, pc}
 8000de8:	200001b8 	.word	0x200001b8

08000dec <_sbrk_r>:
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4d06      	ldr	r5, [pc, #24]	@ (8000e08 <_sbrk_r+0x1c>)
 8000df0:	2300      	movs	r3, #0
 8000df2:	4604      	mov	r4, r0
 8000df4:	4608      	mov	r0, r1
 8000df6:	602b      	str	r3, [r5, #0]
 8000df8:	f7ff fa66 	bl	80002c8 <_sbrk>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d102      	bne.n	8000e06 <_sbrk_r+0x1a>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	b103      	cbz	r3, 8000e06 <_sbrk_r+0x1a>
 8000e04:	6023      	str	r3, [r4, #0]
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	200001b8 	.word	0x200001b8

08000e0c <_init>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	bf00      	nop
 8000e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e12:	bc08      	pop	{r3}
 8000e14:	469e      	mov	lr, r3
 8000e16:	4770      	bx	lr

08000e18 <_fini>:
 8000e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1a:	bf00      	nop
 8000e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1e:	bc08      	pop	{r3}
 8000e20:	469e      	mov	lr, r3
 8000e22:	4770      	bx	lr
